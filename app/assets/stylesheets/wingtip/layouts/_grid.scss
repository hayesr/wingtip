
.container{
  width: $rowWidth;
  max-width: 100%;
  margin: 0 auto;
  padding: 0 ($columnGutter/2); 
  @include clearfix();
}

.row { 
  width: $rowWidth;
  max-width: 100%;
  min-width: $screenSmall;
  margin: 0 auto;
  @include clearfix();
  
  .row { 
    width: auto;
    max-width: none;
    min-width: 0;
    margin: 0 (-($columnGutter/2));
  }

  &.collapse {
    [class*="span"] { padding: 0; }
  }
  .row { width: auto; max-width: none; min-width: 0; margin: 0 (-($columnGutter/2));
    &.collapse { margin: 0; }
  }
}

[class*="span"] { 
  float: $defaultFloat; 
  min-height: 1px; 
  padding: 0 ($columnGutter/2); 
  position: relative;
  &.centered { 
    float: none; 
    margin: 0 auto;
    }
}

[class*="span"] + [class*="span"]:last-child { float: $defaultOpposite; }
[class*="span"] + [class*="span"].end { float: $defaultFloat; }

// Creating column classes
@for $i from 1 through $totalColumns {
  .span#{$i} { width: gridCalc($i, $totalColumns); }
}

// Creating .row-# classes
@for $i from 1 through $totalColumns {
  .row {
    .span#{$i} { @extend .span#{$i}; }
  }
}

// Creating .row .offset# classes
@for $i from 1 through $totalColumns - 2 {
  .row {
    .offset#{$i} { margin-#{$defaultFloat}: gridCalc($i, $totalColumns); }
  }
}

// Creating .row .push-# classes
@for $i from 2 through $totalColumns - 2 {
  .push#{$i} { #{$defaultFloat}: gridCalc($i, $totalColumns); }
  .pull#{$i} { #{$defaultOpposite}: gridCalc($i, $totalColumns); }
}

img, object, embed { max-width: 100%; height: auto; }
object, embed { height: 100%; }
img { -ms-interpolation-mode: bicubic; }
#map_canvas img, .map_canvas img {max-width: none!important;}

@media only screen and (max-width: $screenSmall - 1) {
  body { 
    -webkit-text-size-adjust: none; 
    -ms-text-size-adjust: none; 
    width: 100%; 
    min-width: 0; 
    margin-#{$defaultFloat}: 0; 
    margin-#{$defaultOpposite}: 0; 
    padding-#{$defaultFloat}: 0; 
    padding-#{$defaultOpposite}: 0; 
    }
    
  .row { 
    width: auto; 
    min-width: 0; 
    margin-#{$defaultFloat}: 0; 
    margin-#{$defaultOpposite}: 0; 
    }
  
  // no floating on tiny screens
  [class*="span"] { 
    width: auto !important;
    float: none;
    }
    
  [class*="span"]:last-child, [class*="span"].end,
  [class*="span"] + [class*="span"]:last-child,
  [class*="span"] + [class*="span"].end { 
    float: none;
    }
  
  [class*="span"]:before, [class*="span"]:after { 
    content:""; display:table;
    }
    
  [class*="span"]:after{ clear:both; }
  
  // Placeholder classes for mobile grid overrides
  %no-default-margin { margin-#{$defaultFloat}: 0 !important; }
  %default-auto { #{$defaultFloat}: auto; }
  %opposite-auto { #{$defaultOpposite}: auto; }
  
  @for $i from 1 through $totalColumns - 2 {
    .offset#{$i} { @extend %no-default-margin; }
  }
  @for $i from 2 through $totalColumns - 2 {
    .push#{$i} { @extend %default-auto; }
    .pull#{$i} { @extend %opposite-auto; }
  }

  /* Mobile 4-column Grid */
  @for $i from 1 through $mobileTotalColumns {
    .row {
      .mobile#{$i} { 
        width: gridCalc($i, $mobileTotalColumns) !important; 
        float: $defaultFloat; 
        padding: 0 ($columnGutter/2);
        
        &:last-child { float: $defaultOpposite; }
        &.end { float: $defaultFloat; }
      }
      &.collapse {
        .mobile#{$i} { padding: 0; }
      }
    }
  }
  @for $i from 1 through $mobileTotalColumns - 1 {
    .push#{$i}-mobile { #{$defaultFloat}: gridCalc($i, $mobileTotalColumns); }
    .pull#{$i}-mobile { #{$defaultOpposite}: gridCalc($i, $mobileTotalColumns); }
  }
}